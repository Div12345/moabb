
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_within_session_p300.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_within_session_p300.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_within_session_p300.py:


===========================
Within Session P300
===========================

This example shows how to perform a within session analysis on three different
P300 datasets.

We will compare two pipelines :

- Riemannian geometry
- XDAWN with Linear Discriminant Analysis

We will use the P300 paradigm, which uses the AUC as metric.

.. GENERATED FROM PYTHON SOURCE LINES 17-38

.. code-block:: default

    # Authors: Pedro Rodrigues <pedro.rodrigues01@gmail.com>
    #
    # License: BSD (3-clause)

    import warnings

    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns
    from pyriemann.estimation import Xdawn, XdawnCovariances
    from pyriemann.tangentspace import TangentSpace
    from sklearn.base import BaseEstimator, TransformerMixin
    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
    from sklearn.pipeline import make_pipeline

    import moabb
    from moabb.datasets import BNCI2014009
    from moabb.evaluations import WithinSessionEvaluation
    from moabb.paradigms import P300






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/moabb/moabb/.venv/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)




.. GENERATED FROM PYTHON SOURCE LINES 39-40

getting rid of the warnings about the future

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: default

    warnings.simplefilter(action="ignore", category=FutureWarning)
    warnings.simplefilter(action="ignore", category=RuntimeWarning)

    moabb.set_log_level("info")








.. GENERATED FROM PYTHON SOURCE LINES 46-50

This is an auxiliary transformer that allows one to vectorize data
structures in a pipeline For instance, in the case of an X with dimensions
Nt x Nc x Ns, one might be interested in a new data structure with
dimensions Nt x (Nc.Ns)

.. GENERATED FROM PYTHON SOURCE LINES 50-65

.. code-block:: default



    class Vectorizer(BaseEstimator, TransformerMixin):
        def __init__(self):
            pass

        def fit(self, X, y):
            """fit."""
            return self

        def transform(self, X):
            """transform."""
            return np.reshape(X, (X.shape[0], -1))









.. GENERATED FROM PYTHON SOURCE LINES 66-70

Create Pipelines
----------------

Pipelines must be a dict of sklearn pipeline transformer.

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: default



    pipelines = {}








.. GENERATED FROM PYTHON SOURCE LINES 75-78

We have to do this because the classes are called 'Target' and 'NonTarget'
but the evaluation function uses a LabelEncoder, transforming them
to 0 and 1

.. GENERATED FROM PYTHON SOURCE LINES 78-92

.. code-block:: default

    labels_dict = {"Target": 1, "NonTarget": 0}

    pipelines["RG+LDA"] = make_pipeline(
        XdawnCovariances(
            nfilter=2, classes=[labels_dict["Target"]], estimator="lwf", xdawn_estimator="scm"
        ),
        TangentSpace(),
        LDA(solver="lsqr", shrinkage="auto"),
    )

    pipelines["Xdw+LDA"] = make_pipeline(
        Xdawn(nfilter=2, estimator="scm"), Vectorizer(), LDA(solver="lsqr", shrinkage="auto")
    )








.. GENERATED FROM PYTHON SOURCE LINES 93-103

Evaluation
----------

We define the paradigm (P300) and use all three datasets available for it.
The evaluation will return a DataFrame containing a single AUC score for
each subject / session of the dataset, and for each pipeline.

Results are saved into the database, so that if you add a new pipeline, it
will not run again the evaluation unless a parameter has changed. Results can
be overwritten if necessary.

.. GENERATED FROM PYTHON SOURCE LINES 103-114

.. code-block:: default


    paradigm = P300(resample=128)
    dataset = BNCI2014009()
    dataset.subject_list = dataset.subject_list[:2]
    datasets = [dataset]
    overwrite = True  # set to True if we want to overwrite cached results
    evaluation = WithinSessionEvaluation(
        paradigm=paradigm, datasets=datasets, suffix="examples", overwrite=overwrite
    )
    results = evaluation.process(pipelines)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    009-2014-WithinSession:   0%|          | 0/2 [00:00<?, ?it/s]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A
      0%|                                     | 1.02k/18.5M [00:00<30:34, 10.1kB/s][A
      0%|                                     | 17.4k/18.5M [00:00<03:06, 99.0kB/s][A
      0%|                                      | 33.8k/18.5M [00:00<02:24, 128kB/s][A
      0%|                                      | 50.2k/18.5M [00:00<02:10, 141kB/s][A
      0%|▏                                     | 82.9k/18.5M [00:00<01:29, 207kB/s][A
      1%|▏                                      | 104k/18.5M [00:00<01:28, 209kB/s][A
      1%|▎                                      | 132k/18.5M [00:00<01:19, 230kB/s][A
      1%|▎                                      | 165k/18.5M [00:00<01:10, 260kB/s][A
      1%|▍                                      | 191k/18.5M [00:00<01:10, 261kB/s][A
      1%|▍                                      | 230k/18.5M [00:01<01:01, 299kB/s][A
      2%|▌                                      | 296k/18.5M [00:01<00:45, 405kB/s][A
      2%|▋                                      | 345k/18.5M [00:01<00:42, 429kB/s][A
      2%|▊                                      | 411k/18.5M [00:01<00:36, 495kB/s][A
      3%|█                                      | 509k/18.5M [00:01<00:28, 639kB/s][A
      3%|█▎                                     | 624k/18.5M [00:01<00:22, 788kB/s][A
      4%|█▍                                     | 706k/18.5M [00:01<00:22, 795kB/s][A
      5%|█▊                                     | 837k/18.5M [00:01<00:18, 942kB/s][A
      5%|██                                    | 984k/18.5M [00:01<00:16, 1.10MB/s][A
      6%|██▏                                  | 1.12M/18.5M [00:01<00:15, 1.15MB/s][A
      7%|██▌                                  | 1.28M/18.5M [00:02<00:13, 1.29MB/s][A
      8%|██▉                                  | 1.49M/18.5M [00:02<00:11, 1.53MB/s][A
      9%|███▍                                 | 1.74M/18.5M [00:02<00:09, 1.80MB/s][A
     11%|███▉                                 | 2.00M/18.5M [00:02<00:08, 2.03MB/s][A
     12%|████▌                                | 2.29M/18.5M [00:02<00:07, 2.29MB/s][A
     14%|█████▏                               | 2.62M/18.5M [00:02<00:06, 2.53MB/s][A
     16%|█████▉                               | 2.98M/18.5M [00:02<00:05, 2.84MB/s][A
     18%|██████▊                              | 3.39M/18.5M [00:02<00:04, 3.16MB/s][A
     21%|███████▋                             | 3.87M/18.5M [00:02<00:04, 3.61MB/s][A
     24%|████████▊                            | 4.39M/18.5M [00:02<00:03, 4.07MB/s][A
     27%|█████████▉                           | 5.00M/18.5M [00:03<00:02, 4.59MB/s][A
     31%|███████████▍                         | 5.72M/18.5M [00:03<00:02, 5.33MB/s][A
     35%|████████████▉                        | 6.51M/18.5M [00:03<00:01, 6.05MB/s][A
     40%|██████████████▊                      | 7.41M/18.5M [00:03<00:01, 6.90MB/s][A
     45%|████████████████▊                    | 8.41M/18.5M [00:03<00:01, 7.78MB/s][A
     51%|███████████████████                  | 9.54M/18.5M [00:03<00:01, 8.80MB/s][A
     59%|█████████████████████▊               | 10.9M/18.5M [00:03<00:00, 10.0MB/s][A
     67%|████████████████████████▊            | 12.4M/18.5M [00:03<00:00, 11.4MB/s][A
     76%|████████████████████████████▏        | 14.1M/18.5M [00:03<00:00, 13.0MB/s][A
     86%|███████████████████████████████▉     | 16.0M/18.5M [00:03<00:00, 14.6MB/s][A
     97%|███████████████████████████████████▉ | 18.0M/18.5M [00:04<00:00, 16.3MB/s][A
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 43.6GB/s]
    009-2014-WithinSession:  50%|#####     | 1/2 [00:14<00:14, 14.20s/it]
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A
      0%|                                     | 1.02k/18.5M [00:00<30:35, 10.1kB/s][A
      0%|                                     | 17.4k/18.5M [00:00<03:06, 99.0kB/s][A
      0%|                                      | 33.8k/18.5M [00:00<02:24, 128kB/s][A
      0%|                                      | 50.2k/18.5M [00:00<02:10, 141kB/s][A
      0%|▏                                     | 82.9k/18.5M [00:00<01:29, 207kB/s][A
      1%|▏                                      | 116k/18.5M [00:00<01:14, 247kB/s][A
      1%|▎                                      | 148k/18.5M [00:00<01:07, 272kB/s][A
      1%|▍                                      | 198k/18.5M [00:00<00:53, 340kB/s][A
      1%|▌                                      | 263k/18.5M [00:00<00:41, 436kB/s][A
      2%|▋                                      | 329k/18.5M [00:01<00:36, 501kB/s][A
      2%|▊                                      | 411k/18.5M [00:01<00:30, 595kB/s][A
      3%|█                                      | 493k/18.5M [00:01<00:27, 660kB/s][A
      3%|█▎                                     | 607k/18.5M [00:01<00:22, 803kB/s][A
      4%|█▌                                     | 738k/18.5M [00:01<00:18, 952kB/s][A
      5%|█▊                                    | 886k/18.5M [00:01<00:16, 1.10MB/s][A
      6%|██                                   | 1.05M/18.5M [00:01<00:13, 1.25MB/s][A
      7%|██▍                                  | 1.23M/18.5M [00:01<00:12, 1.41MB/s][A
      8%|██▊                                  | 1.43M/18.5M [00:01<00:10, 1.57MB/s][A
      9%|███▏                                 | 1.61M/18.5M [00:01<00:10, 1.63MB/s][A
     10%|███▋                                 | 1.84M/18.5M [00:02<00:09, 1.82MB/s][A
     11%|████▏                                | 2.11M/18.5M [00:02<00:07, 2.10MB/s][A
     13%|████▉                                | 2.48M/18.5M [00:02<00:06, 2.49MB/s][A
     15%|█████▋                               | 2.87M/18.5M [00:02<00:05, 2.90MB/s][A
     18%|██████▋                              | 3.33M/18.5M [00:02<00:04, 3.38MB/s][A
     21%|███████▋                             | 3.83M/18.5M [00:02<00:03, 3.85MB/s][A
     24%|████████▊                            | 4.42M/18.5M [00:02<00:03, 4.43MB/s][A
     28%|██████████▎                          | 5.16M/18.5M [00:02<00:02, 5.28MB/s][A
     32%|███████████▉                         | 5.98M/18.5M [00:02<00:02, 6.06MB/s][A
     38%|█████████████▉                       | 7.00M/18.5M [00:02<00:01, 7.23MB/s][A
     44%|████████████████▎                    | 8.14M/18.5M [00:03<00:01, 8.34MB/s][A
     51%|██████████████████▉                  | 9.45M/18.5M [00:03<00:00, 9.70MB/s][A
     59%|█████████████████████▋               | 10.9M/18.5M [00:03<00:00, 11.0MB/s][A
     67%|████████████████████████▉            | 12.5M/18.5M [00:03<00:00, 12.5MB/s][A
     77%|████████████████████████████▌        | 14.3M/18.5M [00:03<00:00, 14.0MB/s][A
     88%|████████████████████████████████▍    | 16.3M/18.5M [00:03<00:00, 15.6MB/s][A
     99%|████████████████████████████████████▋| 18.4M/18.5M [00:03<00:00, 17.2MB/s][A
      0%|                                              | 0.00/18.5M [00:00<?, ?B/s][A    100%|█████████████████████████████████████| 18.5M/18.5M [00:00<00:00, 31.6GB/s]
    009-2014-WithinSession: 100%|##########| 2/2 [00:27<00:00, 13.85s/it]    009-2014-WithinSession: 100%|##########| 2/2 [00:27<00:00, 13.90s/it]




.. GENERATED FROM PYTHON SOURCE LINES 115-119

Plot Results
----------------

Here we plot the results to compare the two pipelines

.. GENERATED FROM PYTHON SOURCE LINES 119-138

.. code-block:: default


    fig, ax = plt.subplots(facecolor="white", figsize=[8, 4])

    sns.stripplot(
        data=results,
        y="score",
        x="pipeline",
        ax=ax,
        jitter=True,
        alpha=0.5,
        zorder=1,
        palette="Set1",
    )
    sns.pointplot(data=results, y="score", x="pipeline", ax=ax, zorder=1, palette="Set1")

    ax.set_ylabel("ROC AUC")
    ax.set_ylim(0.5, 1)

    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_within_session_p300_001.png
    :alt: plot within session p300
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  27.972 seconds)


.. _sphx_glr_download_auto_examples_plot_within_session_p300.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_within_session_p300.py <plot_within_session_p300.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_within_session_p300.ipynb <plot_within_session_p300.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
